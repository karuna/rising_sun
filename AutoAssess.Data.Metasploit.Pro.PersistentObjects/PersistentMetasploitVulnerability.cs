using System;
using AutoAssess.Data.Metasploit.Pro.BusinessObjects;
using System.Collections.Generic;

namespace AutoAssess.Data.Metasploit.Pro.PersistentObjects
{
	[Serializable]
	public class PersistentMetasploitVulnerability : MetasploitVulnerability
	{
		public PersistentMetasploitVulnerability ()
		{
		}
		
		public PersistentMetasploitVulnerability (MetasploitVulnerability vuln)
		{
			this.ExploitedAt = vuln.ExploitedAt;
			this.Info = vuln.Info;
			this.Name = vuln.Name;
			this.RemoteCreatedAt = vuln.RemoteCreatedAt;
			this.RemoteHostID = vuln.RemoteHostID;
			this.RemoteID = vuln.RemoteID;
			this.RemoteServiceID = vuln.RemoteServiceID;
			this.RemoteUpdatedAt = vuln.RemoteUpdatedAt;
			
			this.PersistentReferences = new List<PersistentMetasploitVulnerabilityReference>();
			this.PersistentDetails = new List<PersistentMetasploitVulnerabilityDetail>();
			
			foreach (MetasploitVulnerabilityDetail detail in vuln.Details)
				this.PersistentDetails.Add(new PersistentMetasploitVulnerabilityDetail(detail));
			foreach (MetasploitVulnerabilityReference reff in vuln.References)
				this.PersistentReferences.Add (new PersistentMetasploitVulnerabilityReference(reff));
		}
		
		public virtual Guid ID { get; set; }
		
		public virtual Guid CreatedBy { get; set; }
		
		public virtual DateTime CreatedOn { get; set; }
		
		public virtual Guid LastModifiedBy { get; set; }
		
		public virtual DateTime LastModifiedOn { get; set; }
		
		public virtual bool IsActive { get; set; }
		
		public virtual IList<PersistentMetasploitVulnerabilityReference> PersistentReferences { get; set; }
		
		public virtual IList<PersistentMetasploitVulnerabilityDetail> PersistentDetails { get; set; }
		
		public virtual void SetCreationInfo (Guid owner)
		{
			DateTime now = DateTime.Now;
			
			this.ID = Guid.NewGuid();
			this.CreatedBy = owner;
			this.CreatedOn = now;
			this.LastModifiedBy = owner;
			this.LastModifiedOn = now;
			this.IsActive = true;
		}
		
		public virtual void SetCreationInfo(Guid owner, bool recursive)
		{
			this.SetCreationInfo(owner);
			
			if (recursive)
			{
				foreach (var reff in this.PersistentReferences)
					reff.SetCreationInfo(owner);
				foreach(var deet in this.PersistentDetails)
					deet.SetCreationInfo(owner);
			}
		}
		
		public virtual void SetUpdateInfo(Guid modifier)
		{
			this.LastModifiedOn = DateTime.Now;
			this.LastModifiedBy = modifier;
		}
	}
}

