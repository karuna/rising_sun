using System;
using AutoAssess.Data.Metasploit.Pro.PersistentObjects;
using FluentNHibernate.Mapping;

namespace Mappings
{
	public class MetasploitVulnerabilityMap : ClassMap<PersistentMetasploitVulnerability>
	{
		public MetasploitVulnerabilityMap ()
		{
			Table ("metasploitvulnerability");
			
			Id (c => c.ID).Column("metasploitvulnerabilityid")
				.GeneratedBy.Assigned();
			
			Map (c => c.CreatedBy).Column("createdby");
			Map (c => c.CreatedOn).Column("createdon");
			Map (c => c.LastModifiedBy).Column("lastmodifiedby");
			Map (c => c.LastModifiedOn).Column("lastmodifiedon");
			Map (c => c.IsActive).Column("isactive");
			
//			
//			this.Details = vuln.Details;
//			this.ExploitedAt = vuln.ExploitedAt;
//			this.Info = vuln.Info;
//			this.Name = vuln.Name;
//			this.RemoteCreatedAt = vuln.RemoteCreatedAt;
//			this.RemoteHostID = vuln.RemoteHostID;
//			this.RemoteID = vuln.RemoteID;
//			this.RemoteServiceID = vuln.RemoteServiceID;
//			this.RemoteUpdatedAt = vuln.RemoteUpdatedAt;
		
			Map (c => c.ExploitedAt).Column("exploitedat");
			Map (c => c.Info).Column("info");
			Map (c => c.Name).Column("name");
			Map (c => c.RemoteCreatedAt).Column("remotecreatedat");
			Map (c => c.RemoteHostID).Column("remotehostid");
			Map (c => c.RemoteID).Column("remoteid");
			Map (c => c.RemoteServiceID).Column("remoteserviceid");
			Map (c => c.RemoteUpdatedAt).Column("remoteupdatedat");
			
			HasMany <PersistentMetasploitVulnerabilityDetail> (c => c.PersistentDetails)
				.KeyColumn("metasploitvulnerabilityid")
				.Cascade.All();
			
			HasMany <PersistentMetasploitVulnerabilityReference> (c => c.PersistentReferences)
				.KeyColumn("metasploitvulnerabilityid")
				.Cascade.All();
		}
	}
}

